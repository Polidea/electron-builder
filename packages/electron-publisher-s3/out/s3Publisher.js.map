{
  "version": 3,
  "file": "s3Publisher.js",
  "sourceRoot": "",
  "sources": [
    "../src/s3Publisher.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAE,AAAE,AAAM,AAAS;;;;;;AAE5B,AAAO,AAAE,AAAK,AAAE,AAAe,AAAE,AAAM,AAAuB;;;;;;AAC9D,AAAO,AAAkB,AAAS,AAAE,AAAM,AAAkB;;;;;;AAC5D,AAAO,AAAE,AAAI,AAAE,AAAM,AAAY;;;;;;AACjC,AAAO,AAAI,AAAM,AAAM;;;;AACvB,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAM,AAE/B,AAAM,AAAC,AAAO;;;;MAAmB,AAAQ,AAAS;AAKhD,gBAAY,AAAuB,SAAmB,AAAe;AACnE,AAAK,cAAC,AAAO,AAAC;AADsC,aAAI,OAAJ,AAAI,AAAW;AAJpD,aAAE,KAAG,AAAI,AAAE,mCAAC,EAAC,AAAgB,kBAAE,AAAI,AAAC,AAAC;AAE7C,aAAY,eAAG,AAAI;AAK1B,AAAK,AAAC,4GAAmC,AAAI,KAAC,AAAM,MAAE,AAAC;AAEvD,AAAE,AAAC,YAAC,AAAe,2EAAC,AAAO,QAAC,AAAG,IAAC,AAAiB,AAAC,AAAC,oBAAC,AAAC;AACnD,kBAAM,IAAI,AAAK,AAAC,MAAkC,AAAC,AACrD;AAAC;AACD,AAAE,AAAC,YAAC,AAAe,2EAAC,AAAO,QAAC,AAAG,IAAC,AAAqB,AAAC,AAAC,wBAAC,AAAC;AACvD,kBAAM,IAAI,AAAK,AAAC,MAAsC,AAAC,AACzD;AAAC,AACH;AAAC;AAED,AAAoG;AAC9F,AAAM,UAAZ,AAAK,CAAQ,AAAY,MAAE,AAAyB;;;;AAClD,kBAAM,AAAQ,WAAG,AAAQ,oBAAC,AAAI,AAAC;AAC/B,kBAAM,AAAQ,WAAG,MAAM,AAAI,0CAAC,AAAI,AAAC;AACjC,AAAM,yBAAM,AAAO,QAAC,AAAiB,kBAAC,AAAa,cAAC,UAAC,AAAO,SAAE,AAAM,QAAE,AAAQ;AAC5E,sBAAM,AAAM,eAAQ,AAAE,GAAC,AAAM;AAC3B,AAAM,4BAAE,AAAI,MAAC,AAAI,KAAC,AAAO;AACzB,AAAG,yBAAE,CAAC,AAAI,MAAC,AAAI,KAAC,AAAI,QAAI,AAAI,OAAG,AAAE,AAAG,QAAG,AAAI,MAAC,AAAI,KAAC,AAAI,IAAG,AAAC,OAAG,AAAQ;AACpE,AAAG,yBAAE,AAAI,MAAC,AAAI,KAAC,AAAG,OAAI,AAAa;AACnC,AAAI,0BAAE,AAAI,MAAC,AAA8B,+BAAC,AAAI,MAAE,AAAQ,UAAE,AAAI,MAAC,AAAiB,kBAAC,AAAQ,UAAE,AAAQ,AAAC,WAAE,AAAM,AAAC;AAC7G,AAAa,mCAAE,AAAQ,SAAC,AAAI;AAC5B,AAAW,iCAAE,AAAI,gCAAC,AAAM,OAAC,AAAQ,AAAC;AAClC,AAAY,kCAAE,AAAI,MAAC,AAAI,KAAC,AAAY,gBAAI,AAAS,AAClD;AAR6B,iBAAf,AAAI,EAQhB,UAAC,AAAY,OAAE,AAAS;AACzB,AAAE,AAAC,wBAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAClB,AAAM,+BAAC,AAAK,AAAC;AACb,AAAM,AACR;AAAC;AAED,AAAK,AAAC,sGAAiB,AAAQ,4BAAoB,AAAI,KAAC,AAAQ,QAAE,AAAC;AACnE,AAAO,AAAE,AACX;AAAC,AAAC;AAEF,AAAQ;AAAC,2BAAM,AAAM,OAAC,AAAK,AAAE,AAAC,AAChC;;AAAC,AAAC,AACJ,aArBS,AAAI;;AAqBZ;AAED,AAAQ;AACN,AAAM,AAAC,8BAAe,AAAI,KAAC,AAAI,KAAC,AAAM,MAAG,AAC3C;AAAC,AACF",
  "sourcesContent": [
    "import { S3 } from \"aws-sdk\"\nimport { S3Options } from \"electron-builder-http/out/publishOptions\"\nimport { debug, isEmptyOrSpaces } from \"electron-builder-util\"\nimport { PublishContext, Publisher } from \"electron-publish\"\nimport { stat } from \"fs-extra-p\"\nimport mime from \"mime\"\nimport { basename } from \"path\"\n\nexport default class S3Publisher extends Publisher {\n  private readonly s3 = new S3({signatureVersion: \"v4\"})\n\n  readonly providerName = \"S3\"\n\n  constructor(context: PublishContext, private readonly info: S3Options) {\n    super(context)\n\n    debug(`Creating S3 Publisher â€” bucket: ${info.bucket}`)\n\n    if (isEmptyOrSpaces(process.env.AWS_ACCESS_KEY_ID)) {\n      throw new Error(`Env AWS_ACCESS_KEY_ID is not set`)\n    }\n    if (isEmptyOrSpaces(process.env.AWS_SECRET_ACCESS_KEY)) {\n      throw new Error(`Env AWS_SECRET_ACCESS_KEY is not set`)\n    }\n  }\n\n  // http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/s3-example-creating-buckets.html\n  async upload(file: string, safeArtifactName?: string): Promise<any> {\n    const fileName = basename(file)\n    const fileStat = await stat(file)\n    return this.context.cancellationToken.createPromise((resolve, reject, onCancel) => {\n      const upload = this.s3.upload({\n        Bucket: this.info.bucket!,\n        Key: (this.info.path == null ? \"\" : `${this.info.path}/`) + fileName,\n        ACL: this.info.acl || \"public-read\",\n        Body: this.createReadStreamAndProgressBar(file, fileStat, this.createProgressBar(fileName, fileStat), reject),\n        ContentLength: fileStat.size,\n        ContentType: mime.lookup(fileName),\n        StorageClass: this.info.storageClass || undefined\n      }, (error: Error, data: any) => {\n        if (error != null) {\n          reject(error)\n          return\n        }\n\n        debug(`S3 Publisher: ${fileName} was uploaded to ${data.Location}`)\n        resolve()\n      })\n\n      onCancel(() => upload.abort())\n    })\n  }\n\n  toString() {\n    return `S3 (bucket: ${this.info.bucket})`\n  }\n}\n"
  ]
}
